version: "3.8"
services:
  ### Prefect postgres
  postgres:
    image: 10.0.8.191:5000/postgres
    container_name: postgres
    build:
      context: ./database
      dockerfile: Dockerfile
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    deploy:
      placement:
        constraints:
          - node.role == manager
    expose:
      - 5432
    volumes: 
      - db:/var/lib/postgresql/data

  caddy:
    image: caddy:2.7.6
    container_name: caddy
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - "80:80"
    depends_on:
      - rabbitmq
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
        - 5672:5672
        - 15672:15672

  prefect:
    image: prefecthq/prefect:2.14.12-python3.11
    container_name: prefect
    entrypoint: ['prefect', 'server', 'start', '--host', '0.0.0.0']
    environment:
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/prefect
    deploy:
      placement:
        constraints:
          - node.role == manager
    expose:
      - 4200
    volumes:
      - ./pipeline:/pipeline
      - ./data:/data

  # agent:
  #   image: 10.0.8.191:5000/prefect:latest
  #   deploy:
  #     replicas: 4
  #     placement:
  #       max_replicas_per_node: 1
  #       constraints:
  #         - node.role==worker
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.agent
  #   env_file:
  #     - .env
  #   entrypoint: ['prefect', 'agent',  'start', '-p', 'default-agent-pool', '--work-queue', 'test']
  #   volumes:
  #   #   - ./pipeline:/pipeline
  #     - /shared/ec2-user:/data

volumes:
  caddy_data:
  caddy_config:
  db: