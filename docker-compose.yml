services:

  frontend:
    image: david712/frontend:latest
    container_name: frontend
    env_file:
      - frontend/.env.staging
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - filebrowser
    deploy:
      placement:
        constraints:
          - node.role == manager

  postgres:
    image: david712/postgres:latest
    container_name: postgres
    build:
      context: ./database
      dockerfile: Dockerfile
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    deploy:
      placement:
        constraints:
          - node.role == manager
      endpoint_mode: vip
    ports:
      - "5432:5432"
    volumes:
      - ./database/data:/var/lib/postgresql/data

  prefect:
    image: david712/prefect:latest
    container_name: prefect
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4200/api/health" ]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 15s
    build:
      context: ./pipeline
      dockerfile: Dockerfile
    entrypoint: [ '/app/pipeline/wrapper_script.sh' ]
    env_file:
      - pipeline/.env.compose
    ports:
      - "4201:4200"
    volumes:
      - ./pipeline:/app/pipeline
    depends_on:
      - postgres
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  agent:
    image: david712/prefect:latest
    env_file:
      - pipeline/.env.compose
    entrypoint: [ 'python3', '/app/pipeline/pipeline.py' ]
    deploy:
      replicas: 4
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role == worker
      resources:
        limits:
          memory: 3gb
    volumes:
      - /mnt/data/shared:/mnt/data/shared
      - ./pipeline:/app/pipeline
      - ./sample_data:/app/sample_data

  filebrowser:
    image: filebrowser/filebrowser:v2.27.0
    container_name: filebrowser
    restart: always
    volumes:
      - /mnt/data/shared:/srv
      - ./filebrowser/filebrowser.json:/.filebrowser.json
      # - ./filebrowser/filebrowser.json:/etc/config.json
      # - ./filebrowser/filebrowser.db:/database.db
    deploy:
      placement:
        constraints:
          - node.role == manager

  backend:
    image: david712/backend:latest
    container_name: backend
    depends_on:
      - postgres
    volumes:
      - /mnt/data/shared:/mnt/data/shared
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env.compose
    deploy:
      endpoint_mode: vip
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    # ports:
    #   - "3001:3001"

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yaml
      - prometheus-data:/prometheus
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager

  node_exporter:
    image: prom/node-exporter
    ports:
      - target: 9100
        published: 9100
        mode: host
    deploy:
      replicas: 4
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    deploy:
      placement:
        constraints:
          - node.role == manager

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped
    deploy:
      endpoint_mode: vip
      replicas: 4
      placement:
        max_replicas_per_node: 1

          
    

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local