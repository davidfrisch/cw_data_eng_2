version: "3.8"
services:

  nginx:
    image: nginx:stable-alpine-slim
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - prefect

  postgres:
    image: david712/postgres:latest
    container_name: postgres
    build:
      context: ./database
      dockerfile: Dockerfile
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - "5432:5432"
    volumes: 
      - db:/var/lib/postgresql/data



  prefect:
    image: david712/prefect:latest
    container_name: prefect
    depends_on:
      - postgres
    build:
      context: ./pipeline
      dockerfile: Dockerfile
    entrypoint: ['prefect', 'server', 'start', '--host', '0.0.0.0']
    env_file:
      - .env.compose
    deploy:
      placement:
        constraints:
          - node.role == manager
    volumes:
      - /mnt/beegfs/prefect_data:/mnt/beegfs/prefect_data
      - ./pipeline:/app/pipeline

  agent:
    image: david712/prefect:latest
    depends_on:
      - prefect
    env_file:
      - .env.compose
    entrypoint: ['python3', '/app/pipeline/pipeline.py']
    deploy:
      endpoint_mode: vip
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role == worker
      resources:
        limits:
          memory: 3gb
    volumes:
      - /mnt/beegfs/prefect_data:/mnt/beegfs/prefect_data
      - ./pipeline:/app/pipeline
      - ./sample_data:/app/sample_data


  filebrowser:
    image: filebrowser/filebrowser
    container_name: filebrowser
    restart: always
    volumes:
      - /mnt/beegfs/prefect_data:/srv
      - ./filebrowser/filebrowser.json:/.filebrowser.json 
      # - ./filebrowser/filebrowser.json:/etc/config.json
      # - ./filebrowser/filebrowser.db:/database.db
    deploy:
      placement:
        constraints:
          - node.role == manager

volumes:
  db: